{"version":3,"file":"static/js/779.50e1d69d.chunk.js","mappings":"6SAEMA,EAAM,mCAGCC,EAAmB,mCAAG,oGACVC,EAAAA,GAAAA,IACrB,gDACA,CACEC,OAAQ,CACNC,QAASJ,KALkB,cAC3BK,EAD2B,yBAS1BA,EAASC,MATiB,2CAAH,qDAanBC,EAAmB,mCAAG,WAAMC,GAAN,uFACVN,EAAAA,GAAAA,IACrB,4CACA,CACEC,OAAQ,CACNM,MAAOD,EACPJ,QAASJ,KANkB,cAC3BK,EAD2B,yBAU1BA,EAASC,MAViB,2CAAH,sDAcnBI,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,GAAAA,IAAA,6CAAgDS,GAAM,CAC3ER,OAAQ,CACNC,QAASJ,KAHkB,cACzBK,EADyB,yBAMxBA,EAASC,MANe,2CAAH,sDAUjBM,EAAc,mCAAG,WAAMD,GAAN,uFACLT,EAAAA,GAAAA,IAAA,6CACiBS,EADjB,YAErB,CACER,OAAQ,CACNC,QAASJ,KALa,cACtBK,EADsB,yBASrBA,EAASC,MATY,2CAAH,sDAadO,EAAiB,mCAAG,WAAMF,GAAN,uFACRT,EAAAA,GAAAA,IAAA,6CACiBS,EADjB,YAErB,CACER,OAAQ,CACNC,QAASJ,KALgB,cACzBK,EADyB,yBASxBA,EAASC,MATe,2CAAH,qD,8JCrDjBQ,EAAeC,EAAAA,EAAAA,EAAH,6GAQZC,EAAgBD,EAAAA,EAAAA,EAAH,iLAUbE,EAAeF,EAAAA,EAAAA,EAAH,wJ,SCTV,SAASG,IACtB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAcR,OAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE+BX,EAAAA,EAAAA,IAAkBS,GAFjD,OAEUG,EAFV,OAGIJ,EAAWI,EAAaC,SAH5B,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACP,KAGF,8BACsB,IAAnBF,EAAQU,QACP,wBACGV,EAAQW,KAAI,SAAAC,GAAM,OACjB,2BACE,UAAClB,EAAD,uBAAwBkB,EAAOC,WAC/B,SAACjB,EAAD,UAAgBgB,EAAOE,YAFhBF,EAAOrB,GADC,OAQrB,SAACM,EAAD,qEAIP,C","sources":["components/MoviesAPI.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'f34ed5891c665d5a7f0c87dfa3d7e171';\n\n//---- Запрос самых популярных фильмов на сегодня ----\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/all/day',\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  return response.data;\n};\n\n//---- Запрос по поиску кинофильма ----\nexport const fetchMoviesbySearch = async input => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/search/movie',\n    {\n      params: {\n        query: input,\n        api_key: KEY,\n      },\n    }\n  );\n  return response.data;\n};\n\n//---- Запрос полной информации о фильме ----\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n  return response.data;\n};\n\n//---- Запрос информации о актёрском составе ----\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits`,\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  return response.data;\n};\n\n//---- Запрос обзоров ----\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews`,\n    {\n      params: {\n        api_key: KEY,\n      },\n    }\n  );\n  return response.data;\n};\n","import styled from '@emotion/styled';\n\nexport const ReviewAuthor = styled.p`\n  font-size: 20px;\n  font-weight: 600;\n  color: #2f9e99;\n\n  margin-bottom: 5px;\n`;\n\nexport const ReviewContent = styled.p`\n  font-size: 18px;\n  font-weight: 400;\n  margin-bottom: 15px;\n  color: dimgrey;\n  line-height: 25px;\n  font-style: italic;\n  letter-spacing: 0em;\n`;\n\nexport const Notification = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: dimgrey;\n  line-height: 30px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { fetchMovieReviews } from '../../components/MoviesAPI';\n\nimport {\n  ReviewAuthor,\n  ReviewContent,\n  Notification,\n} from '../Reviews/Reviews.styled';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    async function fetchReviews() {\n      try {\n        const movieReviews = await fetchMovieReviews(moviesId);\n        setReviews(movieReviews.results);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchReviews();\n  }, [moviesId]);\n\n  return (\n    <>\n      {reviews.length !== 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <ReviewAuthor> Author: {review.author}</ReviewAuthor>\n              <ReviewContent>{review.content}</ReviewContent>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <Notification>We don`t have any reviews for this movie 😢</Notification>\n      )}\n    </>\n  );\n}\n"],"names":["KEY","fetchTrendingMovies","axios","params","api_key","response","data","fetchMoviesbySearch","input","query","fetchMovieDetails","id","fetchMovieCast","fetchMovieReviews","ReviewAuthor","styled","ReviewContent","Notification","Reviews","useState","reviews","setReviews","moviesId","useParams","useEffect","movieReviews","results","console","log","fetchReviews","length","map","review","author","content"],"sourceRoot":""}